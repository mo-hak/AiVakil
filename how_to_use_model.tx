Models
Use and share pre-trained models
What is Kaggle Models
Kaggle Models provides a way to discover, use, and share models for machine learning and generative AI applications. Kaggle Models is a repository of pre-trained models that are deeply integrated with Kaggle's platform, making them easy to use in Kaggle Competitions and Notebooks. Like Datasets, Kaggle Models organize community activity that enrich models' usefulness: every model page will contain discussions, public notebooks, and usage statistics like downloads and upvotes that make models more useful.

Kaggle Models is a new product which the Kaggle team will continue to develop and improve based on what the community would like to see. If you'd like to make suggestions for improvements or new features or report bugs, we recommend you create a new topic on the Product Feedback forum.

Where do Models come from?
Kaggle Models come from a variety of sources including partners that we collaborate with on releases like Meta's Llama 2 and Alibaba's Qwen, integrations with modeling libraries like Keras, and the community of millions of Kagglers sharing fine-tuned variants and other innovations.

Finding Kaggle Models
You can find Kaggle Models by using the Models landing page. There are a number of filters and sorts plus free text search. For instances you can search by:

Filtering to Keras models
Filtering by the task tag you want (e.g., classification)
Filtering by model size
Searching "Gemma" or other keywords in the free text search
Sorting by number of upvotes
Etc.
You may also want to peruse the "Models" tab on competitions to see what models are performing well or are otherwise popular for tasks relevant to your use case. Competitors commonly share which models they're using in public notebooks and in discussion write-ups. When you fork a notebook that has a model from Kaggle Models attached to it, your copy will also have the same model attached.

Finally, you can also search for models from within the notebook editor. Use the "Add Models" component in the right-hand pane of the editor to search and attach models to your notebooks. This works similarly to Datasets.

Understanding the model detail page
When you click on a model you will be taken to the "detail page" for that model. For example, this is the detail page for a BERT model. The model detail page contains an overview tab with a Model Card (metadata and information about how the model was trained, what its acceptable use cases are, any limitations, etc.), a framework and variation explorer, and a usage dashboard. There are tabs for notebooks and discussions. If a model is useful, you can upvote it.

Beyond the overall metadata, a model detail page also organizes all variations and frameworks for a given model. For example:

Variations: The same model with different numbers of parameters, e.g., small, medium, and large.
Frameworks: The same model with different ML library compatibility, e.g., TensorFlow, PyTorch, etc.
You can view and use the specific framework and variation that you want by selecting it in the file explorer on the overview page beneath the Model Card. From here, you can use click "New Notebook" to attach it to a new notebook to start using the model.

Using Kaggle Models
There's two broad ways that Kaggle Models are useful: on Kaggle and outside of Kaggle (e.g., in production applications or using non-Kaggle tools like Colab, etc.).

On Kaggle
Currently, Kaggle Models very useful within the context of Competitions, specifically for use within Notebooks. Start by either forking a notebook that has a model attached (you can view the attached models on the "Input" tab of any notebook), creating a new notebook on a model, or adding a model to a new notebook from the right-hand pane of the editor.

You'll be prompted to confirm your framework and model variations(s), then simply copy and paste the starter code to load the model.

Outside of Kaggle
Many developers will need to download models in code outside of Kaggle. There are a few different methods: via the kagglehub Python library, via our Kaggle CLI, or by calling the API directly.

Before providing instructions for each of these methods, it's helpful to know that you will need to know how to authenticate in order to access certain models like Gemma that require Kaggle credentials in order to confirm that user consent to the custom license has been verified. Obtain credentials from the “Settings” page when logged-in to Kaggle and clicking on the "Create New Token" button under the "API" section.

The examples below allow you to download the 2b PyTorch variation for the google/gemma model. If a model doesn't have a restricted license like Gemma, you'll be able to skip the kagglehub.login() steps in the examples below.

Method 1. Via the kagglehub Python library
See kagglehub documentation.

import kagglehub

# Authenticate
kagglehub.login() # This will prompt you for your credentials.
# We also offer other ways to authenticate (credential file & env variables): https://github.com/Kaggle/kagglehub?tab=readme-ov-file#authenticate

# Download latest version
path = kagglehub.model_download("google/gemma/pyTorch/2b")

# Download specific version (here version 1)
path = kagglehub.model_download("google/gemma/pyTorch/2b/1")

print("Path to model files:", path)
Method 2. Via the Kaggle CLI
See documentation. Follow steps here to authenticate with credentials.

# Authenticate with credentials

# Download specific version (here version 1)
kaggle models instances versions download google/gemma/pyTorch/2b/1 
Method 3. Calling the API directly
# Authenticate with credentials
export KAGGLE_USERNAME=xyz
export KAGGLE_KEY=xyz

# With Curl
curl -L -o ~/Downloads/model.tar.gz  https://www.kaggle.com/api/v1/models/google/gemma/pyTorch/2b/1/download -u $KAGGLE_USERNAME:$KAGGLE_KEY

# Download specific version (here version 1)
wget https://www.kaggle.com/api/v1/models/google/gemma/pyTorch/2b/1/download --user=$KAGGLE_USERNAME --password=$KAGGLE_KEY --auth-no-challenge
Creating a Model
Kaggle has recently introduced the ability for the community to publish models to Kaggle Models. There are a few ways to accomplish this including exclusively via the UI. We recommend using a combination of kagglehub, our Python client library, to manage artifact creation and uploads and the UI to manage documentation and collaborative features.

Uploading using kagglehub Python client library (preferred)
See kagglehub documentation.


Install with pip install kagglehub
In a Python environment (e.g. Jupyter Notebook, IPython, etc.), run the below code
import kagglehub
from kagglehub.config import get_kaggle_credentials

# Other ways to authenticate also available: https://github.com/Kaggle/kagglehub?tab=readme-ov-file#authenticate
kagglehub.login() 

username, _ = get_kaggle_credentials()

# For PyTorch framework & `2b` variation.
# Replace the framework with "jax", "other" based on which framework you are uploading to.
kagglehub.model_upload(f'{username}/my_model/pyTorch/2b', 'path/to/local/model/files', 'Apache 2.0')

# Run the same command again to upload a new version for an existing variation.
Uploading using the Kaggle CLI
See documentation. Follow steps here to authenticate with credentials.


Install with !pip install kaggle
In a terminal, run the below code
export MODEL_DIR="path/to/local/my-model"
export MODEL_VARIATION_DIR="path/to/local/my-model-variation"

# Go to https://www.kaggle.com/settings, download your API token file and store it at ~/.kaggle/kaggle.json

# Create the model (which will hold the different variations).
kaggle models init -p $MODEL_DIR # This will create a skeleton model-metadata.json
vim $MODEL_DIR/model-metadata.json # Edit model metadata (name, slug, etc.)
kaggle models create -p $MODEL_DIR

# Create the model variation
# IMPORTANT, your model files (weights, config, etc.) should be inside the $MODEL_VARIATION_DIR folder.
kaggle models instances init -p $MODEL_VARIATION_DIR # This will create a skeleton model-instance-metadata.json
vim $MODEL_VARIATION_DIR/model-instance-metadata.json # Edit variation metadata (slug, framework, etc.)

kaggle models instances create -p $MODEL_VARIATION_DIR

# To create a new version for an existing variation, use this command instead:
kaggle models instances versions create -p $MODEL_VARIATION_DIR --version-notes "Made it better" $KAGGLE_USERNAME>/$MODEL_SLUG/$FRAMEWORK/$VARIATION_SLUG
Upload via the UI

Go to: https://www.kaggle.com/models?new=true and follow the steps including setting “Creating As” to the Organization Profile you want to publish under
To add new Variations once your model is initially created:
Scroll down to the "Model Variations" section.
Click on the "New Variation" button to open the "Add/Edit" Variations modal.
Select the ML framework for which you want to update weights / assets for.
Click on the "Add new variation" button
Select the weight / assets files to upload
Enter the variation slug
For example, 7b
Select a license
Click on the "Create" button and wait until your instance has been fully processed.
Click on "Go to model detail page".
In the "Model Variations" section, you should see your variation in the drop-down.
If you select it, confirm that you have all the files you were expecting under the "File Explorer" section.
To upload a new version for an existing variation. Use the "New Version" button.
Documenting models
Documenting your model is easiest to do via the UI.


When viewing your model page, you will see a section at the top called “Pending Actions”.
Follow each of these steps to complete your model’s documentation:
Add a description (model card)
Add model instance descriptions including example code
Add a subtitle
Add tags
Specify provenance and other metadata
Publish a notebook (we recommend making it public after your model is made public)
Once your model is made public, you can also optionally generate a DOI from the “Metadata” section of your model.
Once you’re done, you can make your model public from the “Settings” tab on the model page.
You can now promote your model!
You’ll be automatically subscribed to email and site notifications when any discussion topics are created
Importing Model Versions
This tool allows you to copy model versions from one model to another. You can import versions from any public model or private models where you have collaborator access.


Navigate to your target model's page on Kaggle
Click the "︙" button in the top right
Select "Import Versions" from the dropdown menu
Select Source Model:
Click the "Select Model" button
Browse or search for the model you want to import versions from
You can only select models you own or have collaborator access to
The current model will be disabled to prevent self-copying
Click on your chosen model to select it
Select Versions:
Once you've selected a source model, you'll see all available versions
Use the search bar to filter versions by name
Use the framework chips to filter by specific frameworks (PyTorch, TensorFlow, etc.)
Select versions by checking the boxes in the leftmost column
You can select multiple versions at once
Click "Next" to proceed to confirmation
Confirm and Import:
Review the versions you selected
Each row shows the full path of what will be copied
Source path → Target path is displayed
Important notes:
If importing from a private model to a public model, versions will become public permanently
This action cannot be undone
Click "Import" to begin the copy process
After Import:
A progress indicator will show while versions are being copied
For successful imports:
You'll see a success message
Click "Go to Model" to view your imported versions
If any versions fail to import:
Error messages will explain what went wrong
You can retry failed imports by clicking "Try again"
Successfully copied versions will not be duplicated on retry
Tips for Importing

You can swap the source model at any time using the "Swap model" button
Use framework filters to quickly find specific versions
The version count shows how many items you've selected
All imported versions maintain their original framework and variation slugs
How to name your model and variations
A handle is represented as

owner_slug/model_slug/framework/variation_slug/version_number
The breakdown is as follows:
owner_slug: Your organization or username.
model_slug: The name of your model family (e.g., "llama").
framework: The model framework used (e.g., "pytorch").
variation_slug: Details about this specific version of your model.
version_number: A numeric identifier for tracking model changes.
Model vs. Variation: Uniqueness
A variation is used to add finer level details about a model. A variation should capture the intricacies and nuances of a model. They highlight specific changes or features. Examples include:

Model Size: Number of parameters (e.g., 7 billion)
Optimization: Quantization (e.g., int4), model distillation
Task: What your model does (e.g., image generation, translation, chat)
Training: Specific techniques used (e.g., instruction-tuned, prompt-tuned)
Architecture/Code Modifications: Any changes from the base model
Dataset: The data it was trained on (if relevant)
Language: If your model is language-specific (e.g., "en" for English)
Hardware: Optimized for GPU, CPU, TPU, etc.
Version vs. Variation: Snapshots in Time
Versions are like checkpoints. They represent a model at a specific point in training, usually with all other factors (the variation details) held constant.

Questions to Guide Your Variation Naming:

How large is your model (number of parameters)? ex: 100m, 2b, 27b, etc..
What task does it perform? ex: image generation, text, chat
What dataset was it trained on? ex: coco, imagenet
Did you make any changes to the code, architecture, or configuration?
What training techniques did you use? ex: Instruction Tuned, Prompt Tuned, etc…
Is it optimized for a specific language or hardware? ex: gpu, cpu, tpu
Did you apply any quantization or other optimizations?
General Guidelines for Naming Success:

Keep it Simple: Use clear, concise names.
Be Descriptive: Use the questions above to guide you.
Default to Model Name: If unsure, use the model name as the variation too.
Version for Checkpoints: Use the version number to track training progress.